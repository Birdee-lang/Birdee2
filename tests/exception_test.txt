import rtti:as_instance

@enable_rtti
class E1
	public dummy as int
	public str as string
	public func __init__(str as string) => this.str=str
	public func print() => println("E1"+str)
end

class E2
	public str as string
	public dummy as int
	public func __init__(str as string) => this.str=str
	@virtual public func print() => println("E2"+str)
end

class E3 : E2
	public dummy as int
	public dummy2 as int
	public str as string
	public func __init__(str as string, data as int) 
		this.str=str
		dummy2=data
	end
	@virtual public func print() => println("E3"+str)
end

#declare function getchar() as int
#println("Hello")
#getchar()

function f1()

	try
		f2()
		println("try conti")
	catch e as E1
		e.print()
	catch e as E2
		e.print()
		as_instance[E3](e).for_each(func (e3 as E3) => println(int2str(e3.dummy2)))
	##catch e as E3
		e.print()##
	end
	println("Continue")
end

function f2()

	try
		throw new E3("yo",135)
	catch e as E1
		print("f2")
		e.print()
	##catch e as E2
		print("f2")
		e.print()##
	end
	println("Continue(Should never go here)")
end

f1()

func aaa()
	dim f = func ()
		throw new E3("yo",135)
	end
	f()
end

aaa()