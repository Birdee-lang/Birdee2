##
function try_caught()
	try
		defer
			println("try_caught AA")
		end
		throw new runtime_exception("@#@#")
		println("B")
	catch e as runtime_exception

	end
end
try_caught()

function try_uncaught()
	dim f = func ()
		try
			defer
				println("try_uncaught AA")
			end
			println("Inner")
			throw new runtime_exception("@#@#")
			println("B")
		catch e as someclass
			println("SOMECLASS")
		end
	end
	try
		println("DO try")
		f()
	catch e as runtime_exception
		println("OUTER")
	end
end

try_uncaught()


function notry()
	dim f = func ()
		defer
			println("notry AA")
		end
		println("Inner")
		throw new runtime_exception("@#@#")
		println("B")
	end
	try
		f()
	catch e as runtime_exception
		println("OUTER")
	end
end
notry()

function nothrow()
	defer
		println("nothrow AA")
	end
	println("Inner")
end
nothrow()


function notry_multi()
	dim f = func ()
		defer
			println("notry AA")
		end
		defer
			println("notry BB")
		end
		println("Inner")
		throw new runtime_exception("@#@#")
		defer
			println("notry CC")
		end
	end
	try
		f()
	catch e as runtime_exception
		println("OUTER")
	end
end
notry_multi()

function caught_multi()
	try
		defer
			println("caught AA")
		end
		defer
			println("caught BB")
		end
		println("Inner")
		throw new runtime_exception("@#@#")
		defer
			println("caught CC")
		end
	catch e as runtime_exception
		println("OUTER")
	end
end
caught_multi()


function defer_return()
	println("HELLO")
	defer
		println("OUTER EXIT")
	end
	if true then
		println("INNER")
		defer
			println("INNER EXIT")
		end
		println("INNER After")
		return
	end
	println("CONT")
end

defer_return()


function defer_return_val() as int
	println("HELLO")
	defer
		println("OUTER EXIT")
	end
	if true then
		println("INNER")
		defer
			println("INNER EXIT")
		end
		println("INNER After")
		return 23
	end
	println("CONT")
	return 32
end

println(int2str(defer_return_val()))
##

@enable_rtti
class someclass
end
declare func getchar() as int
#getchar()

function try_defer_return()
	try
		println("HELLO")
		defer
			println("OUTER EXIT")
		end
		if true then
			println("INNER")
			defer
				println("INNER EXIT")
			end
			println("INNER After")
			return
		end
		println("CONT")
	catch e as runtime_exception

	end
end

try_defer_return()

println("DONE")