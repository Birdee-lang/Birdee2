import unsafe:ptr_cast
import unsafe:bit_cast
import unsafe:static_cast
import unsafe:ptr_load
import rtti:dyn_cast

declare function getchar() as int

{@from bdassert import bdassert@}

class bird
	@virtual
	public func say(a as string) as string
		return "bird says " + a
	end

	public abstract func speak(a as string) as string
end

interface itest
	public abstract func a() as string
	public abstract func b(i as int) as string
end

interface itest2 : itest
	public abstract func c(i as int) as string
end

interface itest3
	public abstract func d(i as int) as string
end

class quail : bird impl itest
	@virtual
	public func say(a as string) as string
		return "quail says " + a
	end

	public func speak(a as string) as string
		return "pure virtual quail speaks " + a
	end

	public func a() as string
		return "quail itest a"
	end

	public func b(i as int) as string
		return "quail itest b " + int2str(i)
	end
end

class sparrow impl itest2, itest3
	public func a() as string
		return "sparrow itest a"
	end

	public func b(i as int) as string
		return "sparrow itest b " + int2str(i)
	end

	public func c(i as int) as string
		return "sparrow itest2 c " + int2str(i)
	end

	public func d(i as int) as string
		return "sparrow itest3 d " + int2str(i)
	end
end

dim q = new quail
dim s = new sparrow
dim b as bird = q
dim it as itest = q
dim it_s as itest = s
dim it2_s as itest2 = s
dim it3_s as itest3 = s

{@bdassert('b.say("1") == "quail says 1"')@}
{@bdassert('b.speak("1") == "pure virtual quail speaks 1"')@}

{@bdassert('it.a() == "quail itest a"')@}
{@bdassert('it.b(2) == "quail itest b 2"')@}

{@bdassert('it_s.a() == "sparrow itest a"')@}
{@bdassert('it_s.b(3) == "sparrow itest b 3"')@}

{@bdassert('it2_s.a() == "sparrow itest a"')@}
{@bdassert('it2_s.b(4) == "sparrow itest b 4"')@}
{@bdassert('it2_s.c(4) == "sparrow itest2 c 4"')@}

{@bdassert('it3_s.d(5) == "sparrow itest3 d 5"')@}

class big_sparrow : sparrow
	public func a() as string
		return "big sparrow itest a"
	end

	public func c(i as int) as string
		return "big sparrow itest2 c " + int2str(i)
	end
end

dim bigs = new big_sparrow
s = bigs
it_s = bigs
it2_s = bigs
it3_s = bigs

{@bdassert('s.a() == "big sparrow itest a"')@}
{@bdassert('s.b(6) == "sparrow itest b 6"')@}

{@bdassert('it_s.a() == "big sparrow itest a"')@}
{@bdassert('it_s.b(7) == "sparrow itest b 7"')@}

{@bdassert('it2_s.a() == "big sparrow itest a"')@}
{@bdassert('it2_s.b(8) == "sparrow itest b 8"')@}
{@bdassert('it2_s.c(8) == "big sparrow itest2 c 8"')@}

{@bdassert('it3_s.d(9) == "sparrow itest3 d 9"')@}

println("interface test ok")

# dyn_cast for interface test
interface itest4
	public abstract func xxx() as string
end

try
	s = dyn_cast[sparrow](bigs)
	it_s = dyn_cast[itest](bigs)
	it2_s = dyn_cast[itest2](bigs)
	it3_s = dyn_cast[itest3](bigs)

	{@bdassert('s.a() == "big sparrow itest a"')@}
	{@bdassert('s.b(6) == "sparrow itest b 6"')@}

	{@bdassert('it_s.a() == "big sparrow itest a"')@}
	{@bdassert('it_s.b(7) == "sparrow itest b 7"')@}

	{@bdassert('it2_s.a() == "big sparrow itest a"')@}
	{@bdassert('it2_s.b(8) == "sparrow itest b 8"')@}
	{@bdassert('it2_s.c(8) == "big sparrow itest2 c 8"')@}

	{@bdassert('it3_s.d(9) == "sparrow itest3 d 9"')@}

	{@bdassert('dyn_cast[big_sparrow](s) !== null')@}

	dim s2 = new sparrow
	{@bdassert('dyn_cast[big_sparrow](s2) === null')@}

	it_s = dyn_cast[itest](s)
	{@bdassert('it_s !== null')@}

	dim bigs2 = dyn_cast[big_sparrow](it_s)
	{@bdassert('bigs2 !== null')@}
	{@bdassert('bigs2.a() == "big sparrow itest a"')@}
	{@bdassert('bigs2.b(9) == "sparrow itest b 9"')@}

	it3_s = dyn_cast[itest3](it_s)
	{@bdassert('it3_s !== null')@}
	{@bdassert('it3_s.d(9) == "sparrow itest3 d 9"')@}

	{@bdassert('dyn_cast[itest4](it_s) === null')@}
catch e as runtime_exception
	print(e.msg)
end

println("dyn_cast for interface test ok")
