import fmt
import list:list
import hash:hash_set
import hash:hash_map
import hash:hash_key_exception

import stack:stack
import stack:stack_empty_exception
import queue:queue
import queue:queue_empty_exception

declare function getchar() as int

{@
from bdassert import bdassert
from bdutils import *
def line_pos():
	strpos = str(get_cur_script().pos)
	set_ast(StringLiteralAST.new(strpos))
@}


function check_list[T](lst as list[T], chk as T[], pos as string)
	dim itr = lst.front()
	println("Checking " + pos)
	{@bdassert("lst.size() == chk.length()")@}
	for dim i=0 till chk.length()
		{@bdassert("itr!=lst.ends()")@}
		{@bdassert("itr.get() == chk[i]")@}
		itr.forward()
	end
	{@bdassert("itr == lst.ends()")@}
end


function check_map(lst as hash_map[string,int], start as int, ends as int, pos as string)
	dim itr = lst.front()
	println("Checking " + pos)
	{@bdassert("lst.size() == ends - start")@}
	for dim i=start till ends
		dim n = lst.find(int2str(i))
		{@bdassert("n!=lst.ends()")@}
		{@bdassert("n.getv()==i")@}
	end
	dim cnt=0
	while itr!=lst.ends()
		cnt=cnt+1
		itr.forward()
	end
	{@bdassert("cnt == ends - start")@}
	{@bdassert("itr == lst.ends()")@}
end

function hash_test()
	dim a = new hash_map[string,int] 
	for dim i=0 till 100
		a.insert(int2str(i),i)
	end
	#a.dbgprint()
	check_map(a,0,100,{@line_pos()@})
	{@bdassert("a.get_bucket_num()==255")@}

	println("removing")
	for dim i=7 till 100
		dim node=a.find(int2str(i))
		if node==a.ends() then
			println("ERROR" + int2str(i))
		end
		a.remove(int2str(i))
	end
	check_map(a,0,7,{@line_pos()@})

	try
		a.remove("30")
		{@bdassert("false")@}
	catch e as hash_key_exception
		println("Caught the exception as expected")
	end

	#a.dbgprint()
	println("removing again")
	for dim i=0 till 7
		dim node=a.find(int2str(i))
		if node==a.ends() then
			println("ERROR" + int2str(i))
		end
		a.remove(int2str(i))
	end
	{@bdassert("a.empty()")@}

	println("Insert again")
	for dim i=0 till 15
		a.insert(int2str(i),i)
	end
	#a.dbgprint()

	check_map(a,0,15,{@line_pos()@})

	a.rehash(3)
	{@bdassert("a.get_bucket_num()==3")@}
	check_map(a,0,15,{@line_pos()@})
	println("Rehash ok")

	a["233"] = 12345
	{@bdassert('''a["233"] == 12345''')@}
	a.clear()
	{@bdassert("a.front() == a.ends()")@}


	dim hset = new hash_set[string]
	hset.insert("HI")
	hset.insert("1I")
	{@bdassert('''hset["HI"]''')@}
	{@bdassert('''!hset["I"]''')@}
end

function list_test()
	#test list
	dim lst = new list[int]

	{@bdassert("lst.size()==0 ")@}
	{@bdassert("lst.empty()")@}

	lst.insert_back(123)
	lst.insert_back(234)
	lst.insert_back(345)

	check_list(lst,[123,234,345], {@line_pos()@})
	{@bdassert("!lst.empty()")@}

	lst.remove(lst.front())
	check_list(lst,[234,345], {@line_pos()@})

	lst.remove(lst.back())
	check_list(lst,[234], {@line_pos()@})

	lst.insert_front(2)
	check_list(lst,[2,234],{@line_pos()@})

	dim itr = lst.front().next()
	lst.insert_after(itr, 32)
	check_list(lst,[2,234,32],{@line_pos()@})

	lst.insert_before(itr, 44)
	check_list(lst,[2,44,234,32],{@line_pos()@})

	{@bdassert("lst.back() == itr.next()")@}
	lst.remove(lst.back())
	{@bdassert("lst.back() == itr")@}
	{@bdassert("lst.ends() == itr.next()")@}
	lst.remove(lst.back())
end

function queue_test()
	dim q = new queue[uint]

	{@bdassert("q.size()==0")@}
	q.push(10)
	{@bdassert("q.size()==1")@}
	q.push(20)
	q.push(30)
	q.push(40)
	q.push(50)
	{@bdassert("q.size()==5")@}

	{@bdassert("q.front()==10")@}
	q.pop()
	{@bdassert("q.front()==20")@}
	q.pop()
	{@bdassert("q.front()==30")@}
	q.pop()
	{@bdassert("q.front()==40")@}
	q.pop()
	{@bdassert("q.front()==50")@}
	q.pop()

	{@bdassert("q.size()==0")@}

	try
		q.pop()
		{@bdassert("false")@}
	catch e as queue_empty_exception
		println("Caught queue_empty_exception as expected")
	end

end

function stack_test()
	dim s = new stack[uint]

	{@bdassert("s.size()==0")@}
	s.push(10)
	{@bdassert("s.size()==1")@}
	s.push(20)
	s.push(30)
	s.push(40)
	s.push(50)
	{@bdassert("s.size()==5")@}

	{@bdassert("s.top()==50")@}
	s.pop()
	{@bdassert("s.top()==40")@}
	s.pop()
	{@bdassert("s.top()==30")@}
	s.pop()
	{@bdassert("s.top()==20")@}
	s.pop()
	{@bdassert("s.top()==10")@}
	{@bdassert("s.pop()==10")@}

	{@bdassert("s.size()==0")@}
	try
		s.pop()
		{@bdassert("false")@}
	catch e as stack_empty_exception
		println("Caught stack_empty_exception as expected")
	end
end

hash_test()
list_test()
queue_test()
stack_test()

println("Done")


