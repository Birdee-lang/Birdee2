
import test_package.b.functype_test_lib:*

#pfunc(3,4)

dim fa as tyfunc=function (a as int, b as int) as int => a-b

fa(4,5)

dim fb as test_package.b.functype_test_lib.tyfunc=fa

fb(3,2)

function caller(fun as tyfunc, a as int)
	fun(a,3)
end

caller(function (a as int, b as int) as int => a*b ,  23)



closure consumer () 


function aaa () as consumer
	dim a=1,b=2
	dim fun as consumer = function() => println("hello")
	fun()
	function my_function()
	end
	return function () => println(int2str(a+b))
end


class clsa
	private a as int
	public function aaa()
		dim b as int=3
		dim fun as consumer = function () => println(int2str(a+b))
		fun()			
	end

	public function __init__()
		a=123
	end
end

dim a = aaa()
a()
dim b as clsa = new clsa
b.aaa()



function nested(d as int) as consumer
	dim a=1,b=2
	dim fun as consumer = function my_function()
		dim f = function ()
			dim str as string
			dim f2 = function(c as int) as string => int2str(a+b+c+d)
			str=f2(3)
			println(str)
		end
		f()
	end
	return fun
end

nested(3)()