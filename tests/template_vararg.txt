function add[T,...](a as T) as T
	return a
end

class cls[T,T2,...VArg]
	public a as T
	public function f[...FArg](...)
	end
	public function f2[...FArg](...VArg)
	end
end

dim tuple1 as tuple[int,int]

{@
def tuple_add_fields(cls):
	assert(isinstance(cls,ClassAST))
	idx=1
	for arg in cls.template_instance_args:
		if arg.kind!=TemplateArgument.TemplateArgumentType.TEMPLATE_ARG_TYPE:
			raise RuntimeError("The {}-th template argument should be a type".format(idx))
		ty = arg.resolved_type
		class_body(cls, f"public v{idx} as {ty}\n")
		idx+=1
@}

@tuple_add_fields
class tuple[...]
	public function __init__(...)

	end
end


#add[int](1)
#add[int,uint](2)
#dim p as cls[int,float]
#dim p2 as cls[int]

new cls[int,int,boolean].f[string]("123")
new cls[int,int,boolean].f2[string](true)

dim t as tuple[int,float]=new tuple[int,float](2,3.4)
dim v1 = t.v1
dim v2 = t.v2


##function add2(a as int, ...) as int
	return a
end##

function add3[...](...Hello) as int
	return 0
end

#add3[int]()
#add4[3]

function add4[...](a as int,...) as int
	return 0
end