import unsafe:static_cast

@init_script
{@
import bdutils
from bdassert import bdassert
@}

declare function getchar() as int

@enable_rtti
class TestBase[a]
	public base1 as a
	public base2 as int
	public basestr as string
	public function create()
		base1 = 555
		base2 = 987
		basestr = "truly base str"
	end
	public function getbase1() as a
		return base1
	end
	public function getbase2() as int
		return base2
	end
	public function get() as a
		return base2
	end
end

class TestSon[T1, ...] : TestBase[T1]
	private a as T1
	private b as double
	public pa as T1
	public c as {@bdutils.cls_templ_type_at(1)@}
	public str as string
	public function create()
		super.create()
		a = 50
		b = 11.2
		pa = 99
		c = true
		str = "test_string_base"
	end
	private function get() as T1
		dim func_var = function (a as T1) as T1 => super.get() + a
		return func_var(10)
	end
	public function pubget() as T1
		dim func_var = function () as T1
			return get() + super.get() + a
		end
		return func_var()
	end
	public function add(aa as T1) as T1
		return a + aa
	end
	public function add2(aa as T1) as T1
		return a + aa + get()
	end
end

class TestFather[A, B, C, ...] : TestSon[A, C]
	private aa as A
	private bb as B
	public paa as A
	public cc as C
	public sstr as string
	public function create()
		super.create()
		aa = 100
		bb = 21.2
		paa = 999
		cc = false
		sstr = "test_string_son"
	end
	private function get2() as A
		return 7
	end
	public function pubget() as A
		return super.pubget() + aa + super.base1
	end
	public function add12(aaa as A) as A
		return aaa + aa
	end
	public function add22(aaa as A) as A
		return aaa + aa + get2()
	end
end

dim ts = new TestFather[int, double, boolean]:create()
dim tb as TestBase[int] = ts

{@bdassert('tb.base1 == 555')@}
{@bdassert('ts.base1 == 555')@}
{@bdassert('ts.base2 == 987')@}
{@bdassert('ts.basestr == "truly base str"')@}

ts = static_cast[TestFather[int, double, boolean]](tb)

{@bdassert('ts.getbase1() == 555')@}
{@bdassert('ts.getbase2() == 987')@}
{@bdassert('ts.c')@}

{@bdassert('ts.str == "test_string_base"')@}
{@bdassert('!ts.cc')@}
{@bdassert('ts.sstr == "test_string_son"')@}

{@bdassert('ts.add(10) == 60')@}
{@bdassert('ts.add2(10) == 1057')@}
{@bdassert('ts.add12(10) == 110')@}
{@bdassert('ts.add22(10) == 117')@}

{@bdassert('ts.pubget() == 2689')@}

{@bdassert('ts.pa == 99')@}
{@bdassert('ts.paa == 999')@}

ts.pa = 88
ts.paa = 888
ts.str = "son str after modified"
ts.sstr = "base str after modified"

ts.base1 = 1999
ts.basestr = "truly base str after modified"

{@bdassert('ts.pa == 88')@}
{@bdassert('ts.paa == 888')@}
{@bdassert('ts.str == "son str after modified"')@}
{@bdassert('ts.sstr == "base str after modified"')@}
{@bdassert('ts.base1 == 1999')@}
{@bdassert('ts.basestr == "truly base str after modified"')@}

{@bdassert('ts.pubget() == 4133')@}
{@bdassert('typeof(ts).get_name() == "class_inherit_test.TestFather[int,double,boolean]"')@}

class bird
	@virtual
	public func say(a as string) as string
		return "bird says " + a
	end

	public abstract func speak(a as string) as string
end

class quail : bird
	@virtual
	public func say(a as string) as string
		return "quail says " + a
	end

	public func speak(a as string) as string
		return "pure virtual quail speaks " + a
	end
end

class swallow : bird
	public func speak(a as string) as string
		return "pure virtual swallow speaks " + a
	end
end

dim a = new quail
dim s = new swallow
dim b as bird = a
dim d as bird = s

dim str as string
str = b.say("test1")
{@bdassert('str == "quail says test1"')@}
str = d.say("test2")
{@bdassert('str == "bird says test2"')@}
str = d.speak("test3")
{@bdassert('str == "pure virtual swallow speaks test3"')@}

println("inherit test ok")