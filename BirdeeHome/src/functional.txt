
@init_script
{@
from traits import *
def check_optional(cls):
	targ = cls.template_instance_args[0]
	assert(targ.kind==TemplateArgument.TemplateArgumentType.TEMPLATE_ARG_TYPE)
	type = targ.resolved_type
	if type.index_level==0 and (type.base!=BasicType.CLASS or type.get_detail().is_struct):
		raise RuntimeError("Optional can only hold references. However, T is {}".format(type))

def check_if_is_optional(type):
	optional_class = get_cur_func().proto.cls.template_source_class
	cls=type.get_detail()
	if not isinstance(cls,ClassAST):
		raise RuntimeError("Expecting a function that returns an optional. However, the return type is {}".format(cls.get_unique_name()))
	chk_src_class = cls.template_source_class
	if chk_src_class != optional_class:
		raise RuntimeError("Expecting a function that returns an optional. However, the return type is {}".format(cls.get_unique_name()))
@}

@check_optional
struct optional[T]
	private obj as T
	
	public function set(o as T) => obj = o
	public function get() as T => obj
	public function or_else(other as T) as T
		if obj===null then
			return other
		else
			return obj
		end
	end

	public function map[FT](map_func as FT) as {@
func_type = return_type_of(get_parameter(0))
ret_type = resolve_type("optional[{}]".format(str(func_type)))
set_type(ret_type)@}
		dim ret as {@set_type(get_cur_func().proto.return_type)@}
		if obj!==null then
			ret.set(map_func(obj))
		else
			ret.set(null)
		end
		return ret
	end

	public function flat_map[FT](map_func as FT) as {@
func_type = return_type_of(get_parameter(0))
check_if_is_optional(func_type)
set_type(func_type)@}
		if obj!==null then
			return map_func(obj)
		end
		dim ret as {@set_type(get_cur_func().proto.return_type)@}
		ret.set(null)
		return ret
	end

	public function filter[FT](predicate as FT) as optional[T]
{@
ty=get_parameter(0).resolved_type
ty_T = get_cur_func().proto.cls.template_instance_args[0].resolved_type
if not is_prototype(ty) or not check_prototype(ty.get_detail(),get_boolean_type(),ty_T):
	raise RuntimeError("Expecting the predicate with type - func (x as {}) as boolean, however its type is {}".format(ty_T,ty))	
@}
		if obj!==null && predicate(obj) then
			return this 
		end
		dim ret as optional[T]
		ret.set(null)
		return ret
	end

end

function optional_of[T](v as T) as optional[T]
	dim ret as optional[T]
	ret.set(v)
	return ret
end


#optional_of("123").flat_map(func (str as string) as optional[string] => optional_of("hello"+str)).get()
#optional_of("123").filter(func (str as string) as boolean => str=="123" )
#dim a as int[]
#dim result as string  = optional_of(a).map(func (a as int[]) as string => int2str(a[0]) ).map(func (str as string) as string => "hello"+str ).get()