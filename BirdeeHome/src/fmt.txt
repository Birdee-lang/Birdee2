import string_buffer:string_buffer

@init_script
{@
ty_str=resolve_type("birdee.string")
ty_int=resolve_type("int")
ty_double=resolve_type("double")
ty_pointer=resolve_type("pointer")
ty_bool=resolve_type("boolean")
from bdutils import *
from traits import *
@}

function fmtprint[fmt as string,...](...)
{@
fmtexpr=expr("fmt")
fmt=fmtexpr.get().impl.value
cur_fun=get_cur_func()
args=cur_fun.proto.args
arg_cnt=len(args)
body=cur_fun.body
cur_str=''
in_ctrl=False
arg_idx=0

def check_arg(arg_idx,arg_cnt):
	if arg_idx>=arg_cnt:
		raise RuntimeError(f'Too less arguments given. Expecting the {arg_idx}-th argument, but {arg_cnt} are given')
def check_type(args,idx,ty):
	if args[idx].resolved_type!=ty:
		raise RuntimeError(f'Expecting the {idx}-th argument to be {ty}, but {args[idx].resolved_type} is given')

for i in range(len(fmt)):
	if in_ctrl:
		in_ctrl=False
		if fmt[i]=='%':
			cur_str+='%'
		else:
			if cur_str:
				body.push_back(expr(f"print('''{cur_str}''')"))
				cur_str=""
			check_arg(arg_idx,arg_cnt)
			if fmt[i]=='d':
				check_type(args,arg_idx,ty_int)
				body.push_back(expr(f"print(int2str(___vararg{arg_idx}))"))
			elif fmt[i]=='s':
				check_type(args,arg_idx,ty_str)
				body.push_back(expr(f"print(___vararg{arg_idx})"))
			elif fmt[i]=='f':
				check_type(args,arg_idx,ty_str)
				body.push_back(expr(f"print(double2str(___vararg{arg_idx}))"))
			elif fmt[i]=='p':
				check_type(args,arg_idx,ty_pointer)
				body.push_back(expr(f"print(pointer2str(___vararg{arg_idx}))"))
			elif fmt[i]=='b':
				check_type(args,arg_idx,ty_bool)
				body.push_back(expr(f"print(bool2str(___vararg{arg_idx}))"))
			else:
				raise RuntimeError(f"Bad control character {fmt[i]}")
			arg_idx+=1
	else:
		if fmt[i]!='%':
			cur_str+=fmt[i]
		else:
			in_ctrl=True

if arg_idx!=arg_cnt:
	raise RuntimeError(f"Too many arguments given. Expecting {arg_idx} but {arg_cnt} are given")
if cur_str:
	body.push_back(expr(f"print('''{cur_str}''')"))
@}
end


function array_to_str[T](v as T[]) as string
	if v===null then
		return "(null array)"
	end
	dim buf as string_buffer = new string_buffer
	buf.append("[")
	for dim i =0u till v.length() - 1 
		buf.append(to_str[T](v[i]))
		buf.append(",")
	end
	if v.length()>0 then
		buf.append(to_str[T](v[v.length()-1]))
	end
	buf.append("]")
	return buf.to_str()
end

function to_str[T](v as T) as string
{@
T = get_func_type_templ_at(0)
if is_reference(T):
	set_stmt('''if v===null then
	return "(null reference)"
end
''')
@}

{@
if is_boolean(T):
	set_stmt("return bool2str(v)")
elif T == ty_str:
	set_stmt("return v")
elif is_integer(T):
	set_stmt("return int2str(v)")
elif is_float_point(T):
	set_stmt("return double2str(v)")
elif T.index_level>0:
	set_stmt("return array_to_str(v)")
elif is_a_class(T):
	set_stmt('''return "<{} object at "+ pointer2str(pointerof(v)) +">"'''.format(str(T)))
else:
	raise RuntimeError("Cannot convert {} to string".format(str(T)))
@}
end

function printany[T](v as T) => print(to_str[T](v))
