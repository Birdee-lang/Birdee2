class vector[T]
	private buf as T[]
	private len as uint
	private func check_index(idx as uint)
		if idx>=len then
			throw new invalid_index_exception
		end
	end

	private func reserve_n(n as uint)
		dim newsize = buf.length()
		if len > n then
			newsize = newsize + newsize
		else
			newsize = newsize + n
		end
		dim newbuf = new T * newsize
		for dim i=0 till len
			newbuf[i]=buf[i]
		end
		buf=newbuf
	end

	public func __getitem__ (idx as uint) as T
		check_index(idx)
		return buf[idx]
	end

	public func __init__(sz as uint) 
		buf=new T * sz
		len=sz
	end

	public func size() as uint => len
	public func buffer() as T[] => buf

	public func capacity() as uint => buf.length()

	public func clear() => len = 0

	public func push_back(itm as T)
		if len >= buf.length() then
			reserve_n(1)
		end
		buf[len]=itm
		len = len + 1
	end

	public func push_chunk(itms as T[], start as uint, length as uint)
		if len + length > buf.length() then
			reserve_n(length)
		end
		for dim i as uint=0 till length
			buf[i+len]= itms[i+start]
		end
		len = len + length
	end

	public func __setitem__ (idx as uint,value as T)
		check_index(idx)
		buf[idx]=value
	end

	public func remove_at(idx as uint)
		check_index(idx)
		for dim i = idx + 1 till len
			buf[i-1] = buf[i]
		end
		len = len - 1
	end

	public func pop_back()
		check_index(0)
		len = len - 1
	end
end



