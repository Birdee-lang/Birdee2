package functional

@init_script
{@
from traits import *
from bdutils import *
def T_is_not_reference():
	cls=get_cur_class()
	targ = cls.template_instance_args[0]
	assert(targ.kind==TemplateArgument.TemplateArgumentType.TEMPLATE_ARG_TYPE)
	type = targ.resolved_type
	if type.base==BasicType.VOID :
		raise RuntimeError("T for option cannot be void")
	return type.index_level==0 and (type.base!=BasicType.CLASS or type.get_detail().is_struct)
		
@}

struct option[T]
	private obj as T
	public function is_defined() as boolean
return {@
if T_is_not_reference():
	class_body(get_cur_class(),"private _defined as boolean\n")
	set_expr("_defined")
else:
	set_expr("obj!=null")
@}
	end
	public function set(o as T)
		obj = o
{@
if T_is_not_reference():
	set_stmt("_defined = true")
@}
	end

	public function reset()
{@
if T_is_not_reference():
	set_stmt("_defined = false")
else:
	set_stmt("obj = null")
@}
	end

	public function get() as T => obj
	public function or_else(other as T) as T
		if is_defined() then
			return obj
		else
			return other
		end
	end

	public function map[T2](map_func as closure(v as T) as T2) as option[T2]
		dim ret as option[T2]
		if is_defined() then
			ret.set(map_func(obj))
		else
			ret.reset()
		end
		return ret
	end

	public function for_each(map_func as closure(v as T))
		if is_defined() then
			map_func(obj)
		end
	end

	public function flat_map[T2](map_func as closure(v as T) as option[T2]) as option[T2]
		if is_defined() then
			return map_func(obj)
		end
		dim ret as option[T2]
		ret.reset()
		return ret
	end

	public function filter(predicate as closure (obj as T) as boolean) as option[T]
		if is_defined() && predicate(obj) then
			return this 
		end
		dim ret as option[T]
		ret.reset()
		return ret
	end

end

function some[T](v as T) as option[T]
	dim ret as option[T]
	ret.set(v)
	return ret
end

function none[T]() as option[T]
	dim ret as option[T]
	ret.reset()
	return ret
end

##class String
	public v as string
	public func __init__(v as string) => this.v=v
end##

#dim vv = some("123").flat_map(func (str as string) as option[String] => some(new String(str+"sda"))).get()
#println(vv.v)
#option_of("123").filter(func (str as string) as boolean => str=="123" )
#dim a as int[]
#dim result as string  = option_of(a).map(func (a as int[]) as string => int2str(a[0]) ).map(func (str as string) as string => "hello"+str ).get()