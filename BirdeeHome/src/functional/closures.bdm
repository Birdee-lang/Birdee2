package functional

struct closure_unpacked
	public funcptr as pointer
	public data as pointer
end

@init_script
{@
from traits import *
from traits import _
from bdutils import *

def check_templ_arg_is_functype(idx):
	def checker(fn):
		ty = get_func_type_templ_at(0,fn)
		require_(is_prototype(ty))
	return checker

def check_templ_arg_is_closure(idx):
	def checker(fn):
		ty = get_func_type_templ_at(0,fn)
		require_(is_prototype(ty))
		require_( (ty.get_detail().is_closure, lambda:"Expecting a closure"))
	return checker
@}

@check_templ_arg_is_closure(0)
function unpack_closure[T](f as T) as closure_unpacked => unsafe.ptr_load[closure_unpacked](addressof(f))

@check_templ_arg_is_closure(0)
function pack_closure[TClosure, T](obj as T, funct as pointer) as TClosure 
	dim v as closure_unpacked
	v.funcptr = funct
	v.data = pointerof(obj)
	return unsafe.ptr_load[TClosure](addressof(v))
end

