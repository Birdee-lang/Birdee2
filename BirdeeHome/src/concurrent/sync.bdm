package concurrent

import {@"system.specific.win32.concurrent" if get_os_name()=="windows" else "system.specific.unistd.concurrent"@}:*
import concurrent.syncdef:*
import unsafe:ptr_cast

class mutex
	private storage as mutex_t
	public function __init__()
		storage.init()
	end

	public function acquire()
		storage.enter()
	end

	public function release()
		storage.leave()
	end

	public function __del__()
		storage.del()
	end
end

function create_future[T]() as future[T] => new future_impl[T]()

function get_poller() as poller => new poller

function await_multi[T](futures as future[T][], timeout as int) as future[T]
	dim ret = _await_multiple_awaitables(ptr_cast[awaitable[]](futures), 0, futures.length(), timeout)
	dim retf = ptr_cast[future[T]](ret)
	retf.do_then()
	return retf
end
