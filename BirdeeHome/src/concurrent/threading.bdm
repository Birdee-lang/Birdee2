package concurrent

import functional.closures:*
import unsafe
import {@"system.specific.win32.concurrent" if get_os_name()=="windows" else "system.specific.unistd.concurrent"@}:*



@init_script
{@
from traits import *
from traits import _
from bdutils import *
imports("functional.closures")
from functional_0closures import *
osname =  get_os_name()

def expand_vararg(func, idx_start):
	args = func.proto.args
	ret = ""
	for i in range(idx_start,len(args)):
		ret+= args[i].name+','
	return ret[:-1]
@}

function sleep(ms as int)
	_sleep(ms)
end

class thread
	private handle as pointer

	public function __init__[T,...](fn as T, ...)
{@
func=get_cur_func()
check_templ_arg_is_functype(0)(func)
@}
		dim f = function ()
			currentthread = this
			{@set_ast(expr("fn({})".format(expand_vararg(func,1))))@}
			{@if osname=='linux': set_ast(expr("do_exit_thread()"))@}		
		end
		dim unpacked = unpack_closure(f)
		handle = do_create_thread(unpacked.funcptr,unpacked.data)
	end

	public function join()
		_join_thread(handle)
	end

	public function __del__()
		_close_thread(handle)
	end

	public function set_native(n as pointer)
		handle=n
	end

	public function get_native() as pointer => handle
end

@private
@threadlocal
dim currentthread as thread

func get_current_thread() as thread
	if currentthread===null then
		currentthread = new thread:set_native(_get_current_thread())
	end
	return currentthread
end

##func aaaa()
	dim a as int
	dim b = func()
		a
		println("hi")
	end
	dim clo = unpack_closure(b)
	println(pointer2str(clo.data))
	println(pointer2str(clo.funcptr))
end

aaaa()##



