class list[T]
	public head as list_node[T]
	# public tail as list_node[T]
	public size as uint

	public function insert_front(v as T)
		dim node = new list_node[T]
		node.v = v
		node.next = head.next
		node.prev = head
		head.next.prev = node
		head.next = node
		size = size + 1
	end

	public function insert_back(v as T)
		dim node = new list_node[T]
		node.v = v
		node.next = head
		node.prev = head.prev
		head.prev.next = node
		head.prev = node
		size = size + 1
	end

	public function insert(prev_node as list_node[T], v as T)
		dim node = new list_node[T]
		node.v = v
		node.next = prev_node.next
		node.prev = prev_node
		prev_node.next.prev = node
		prev_node.next = node
		size = size + 1
	end

	public function __init__()
		head = new list_node[T]
		# tail = new list_node[T]
		head.next = head
		head.prev = head
		# tail.next = head
		# tail.prev = head
		size = 0
	end

	public function remove(node as list_node[T])
		if node !== head then
			node.prev.next = node.next
			node.next.prev = node.prev
			size = size - 1
		end
	end

	public function clear()
		head.next = head
		head.prev = head
		# tail.next = head
		# tail.prev = head
		size = 0
	end

	public function empty() as boolean
		return size == 0
	end

	public function get_size() as uint
		return size
	end
end

class list_node[T]
	public v as T
	public prev as list_node[T]
	public next as list_node[T]
end
