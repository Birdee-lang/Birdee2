import list:list
class pair[K,V]
	public key as K
	public value as V
	public function set(k as K, v as V)
		key=k
		value=v
	end
end

function int_hash(v as ulong) as uint
	v = v ^ (v/32)
	v = v ^ (v/1024*1024)
	return v
end

function hash[T](v as T) as uint
	return {@
ty=resolve_type("T")
if ty.is_integer():
	set_ast(expr("int_hash(v)"))
elif ty.index_level==0 and ty.base==BasicType.CLASS:
	set_ast(expr("v.__hash__()"))
else:
	raise Exception(f"Cannot hash the type: {ty}")
@}
end

class hash_map[K,V]
	private buckets as list[pair[K,V]][]
	private buckets_num as int
	public function create()
		buckets_num=100
		buckets=new list[pair[K,V]] * 100
		for dim i = 0 till buckets_num
			buckets[i]= new list[pair[K,V]]
		end
	end

	public function set(k as K, v as V) as hash_map[K,V] 
		dim h = hash[K](k)
		dim lst = buckets[h%buckets_num]
		dim _pair = get_pair_from_list(k,lst)
		if _pair === null then
			lst.push_back(new pair[K,V]:set(k,v))
		else
			_pair.value = v
		end
	end

	public function get_pair(k as K) as pair[K,V]
		dim h = hash[K](k)
		dim lst = buckets[h%buckets_num]
		return get_pair_from_list(k,lst)
	end


	function get_pair_from_list(k as K, lst as list[pair[K,V]]) as pair[K,V]
		dim cur=lst.head.next
		while cur!==lst.head
			if cur.v.key == k then
				return cur.v
			end
			cur=cur.next
		end
		return null
	end

end