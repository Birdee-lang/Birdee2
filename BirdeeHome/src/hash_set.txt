import list:list
import list:list_node
import hash_map:int_hash
import hash_map:hash

class hash_set[T]
	private buckets as list[T][]
	private buckets_num as int
	private size as uint
	public function __init__()
		size = 0
		buckets_num = 100
		buckets = new list[T] * 100
		for dim i = 0 till buckets_num
			buckets[i] = new list[T]
		end
	end

	private function find(t as T) as list_node[T]
		dim h = hash[T](t)
		dim lst = buckets[h % buckets_num]
		dim cur = lst.head.next
		while cur !== lst.tail
			if cur.v == t then
				return cur
			end
		end

		return null
	end

	public function has(t as T) as boolean
		if find(t) !== null then
			return true
		else
			return false
		end
	end

	public function insert(t as T)
		if has(t) != true then
			dim h = hash[T](t)
			dim lst = buckets[h % buckets_num]
			size = size + 1
			lst.insert_back(t)
		end
	end

	public function remove(t as T) as boolean
		dim node = find(t)
		if node === null then
			return false
		else
			dim h = hash[T](t)
			dim lst = buckets[h % buckets_num]
			size = size - 1
			lst.remove(node)
			return true
		end
	end

	public function clear()
		for dim i = 0 till buckets_num
			buckets[i].clear()
		end
		size = 0
	end

	public function get_size() as uint
		return size
	end

	public function empty() as boolean
		return size == 0
	end

end