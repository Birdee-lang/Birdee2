@private declare function puts (str as pointer) as int
@private declare function prints (str as pointer) as int
@private declare function memcpy alias "llvm.memcpy.p0i8.p0i8.i32"(dest as pointer,src as pointer, len as uint, align as uint, is_volatile as boolean)
@private declare function strcmp (a as pointer,b as pointer) as int
declare function breakpoint alias "llvm.debugtrap" ()


class genericarray
	private len as uint
	private dummy as pointer
	public function length() as uint
		return len
	end
	public function get_raw() as pointer
		return addressof(dummy)
	end
end

class string
	private buf as byte[]
	private len as uint
	public function length() as uint
		return len
	end
	public function __add__(other as string) as string
		dim ret=new string
		dim newlen as uint=len+other.len+1
		ret.buf=new byte * newlen
		ret.buf[newlen-1]=0
		memcpy(addressof(ret.buf[0]),addressof(buf[0]),len,1,false)
		memcpy(addressof(ret.buf[len]),addressof(other.buf[0]),other.len,1,false)
		ret.len=len+other.len
		return ret
	end
	public function __init__()
		len=0
		buf=null
	end

	public function __hash__() as uint
		dim h as uint = 0

		for dim i=0 till len
			h=31*h + buf[i]
		end
		return h
	end

	public function __eq__(other as string) as boolean
		if other===this then
			return true
		end
		if other===null then
			return false
		end
		return strcmp(addressof(buf[0]),addressof(other.buf[0]))==0
	end

	public function __ne__(other as string) as boolean
		if __eq__(other) then
			return false
		else
			return true
		end
	end

	public function copy_bytes(buffer as byte[], start as uint, length as uint)
		len=length
		buf=new byte * (length+1)
		buf[length]=0
		memcpy(addressof(buf[0]),addressof(buffer[start]),length,1,false)
	end

	public function get_bytes() as byte[]
		return buf
	end

	public function get_raw() as pointer
		return addressof(buf[0])
	end

	public function __getitem__(pos as uint) as byte
		return buf[pos]
	end

end class

struct unpacked_interface
	public itable as pointer
	public instance as pointer
end

class type_info
	private name as string
	private parent as type_info
	private impl_size as uint
	private implements as type_info[]
	private itables as pointer[]

	public function get_name() as string => name
	public function get_parent() as type_info => parent
	public function get_implement_size() as uint => impl_size

	public function is_parent_of(child as type_info) as boolean
		dim cur = child
		while cur!==null
			if cur === this then
				return true
			end
			cur=cur.get_parent()
		end
		return false
	end

	public function is_impl_of(interf as type_info) as boolean
		for dim i=0 till impl_size
			dim cur = implements[i]
			if interf.is_parent_of(cur) then
				return true
			end
		end
		return false
	end

	public function get_impl_itable(interf as type_info) as pointer
		for dim i=0 till impl_size
			dim cur = implements[i]
			if interf === cur then
				return itables[i]
			end
		end
		return pointerof(null)
	end
end

class runtime_exception
	public msg as string
	public func __init__(m as string) => msg=m
	@virtual public func get_message() as string => msg
end

declare function int2str alias "BirdeeI2S" (i as int) as string
declare function pointer2str alias "BirdeeP2S" (i as pointer) as string
declare function double2str alias "BirdeeD2S" (i as double) as string

function bool2str(i as boolean) as string
	if i then
		return "true"
	else
		return "false"
	end
end

function print(str as string)
	prints(str.get_raw())
end

function println(str as string)
	puts(str.get_raw())
end


@enable_rtti
class mem_access_exception

end

@enable_rtti
class div_zero_exception

end

@private
function __create_basic_exception_no_call(ty as int) as pointer
	if ty==0 then
		return pointerof(new mem_access_exception)
	else if ty==1 then
		return pointerof(new div_zero_exception)
	end
end
