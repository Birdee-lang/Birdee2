{@
cnt=0
def counter():
	global cnt
	cnt+=1
	return str(cnt)
def init_safety_check(func):
	vars=set()
	print("checking",func)
	def check(stmt):
		if isinstance(stmt,BinaryExprAST):
			if stmt.op==BinaryOp.BIN_ASSIGN and isinstance(stmt.lhs,IdentifierExprAST) and isinstance(stmt.lhs.impl,LocalVarExprAST):
				var=stmt.lhs.impl.vardef
				print("remove",var.name)
				if var in vars:
					vars.remove(var)
				stmt.rhs.run(check)
			else:
				stmt.lhs.run(check)
		elif isinstance(stmt,LocalVarExprAST):
			var=stmt.vardef
			if var in vars:
				print("Variable used before initialized:", var.name, "at", stmt.pos)
		else:
			stmt.run(check)
	for stmt in func.body:
		if isinstance(stmt,VariableSingleDefAST):
			if not stmt.value:
				vars.add(stmt)
			else:
				check(stmt)
		else:
			check(stmt)
@}

@init_safety_check
function aaa()
	dim v as int
	v=1
	dim g as int
	println(int2str(g))
	println(int2str(v))
end

1234
1.234f

function bbb()
	dim c as int
end

dim a  = {@expr(f"{counter()}")@}
dim b  = {@expr(f"{counter()}")@}
dim c  = {@expr(f"\"{counter()}\"")@}

##
{@
top=get_top_level()
print(type(top))
for func in top:
	if isinstance(func,FunctionAST):
		#print(func.proto.prefix+func.proto.name)
		#print(func.body[0].pos)
		'''for substmt in func.body:
			print("\t"+str(type(substmt)) +" " + substmt.pos.__str__())
			print(f"\t{substmt.pos}")'''
		init_safety_check(func)

	'''if isinstance(func,NumberExprAST):
		print(func.value)
		if func.type==BasicType.int_:
			func.value=431
		if func.type==BasicType.float_:
			func.value=4.31'''
		
@}
##