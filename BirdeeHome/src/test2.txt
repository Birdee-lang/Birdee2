{@
cnt=0
def counter():
	global cnt
	cnt+=1
	return str(cnt)
def init_safety_check(func):
	vars=set()
	print("checking",func)
	def check(stmt):
		if isinstance(stmt,BinaryExprAST):
			if stmt.op==BinaryOp.BIN_ASSIGN and isinstance(stmt.lhs,IdentifierExprAST) and isinstance(stmt.lhs.impl,LocalVarExprAST):
				var=stmt.lhs.impl.vardef
				if var in vars:
					vars.remove(var)
				stmt.rhs.run(check)
			else:
				stmt.lhs.run(check)
		elif isinstance(stmt,LocalVarExprAST):
			var=stmt.vardef
			if var in vars:
				print("Variable used before initialized:", var.name, "at", stmt.pos)
		else:
			stmt.run(check)
	for stmt in func.body:
		if isinstance(stmt,VariableSingleDefAST):
			if not stmt.value:
				vars.add(stmt)
			else:
				check(stmt)
		else:
			check(stmt)

def parse_template(func):
	print("is template?",func.is_template())
	for param in func.template_param.params:
		print("Param:",param.type,param.name)
@}

@init_safety_check
function aaa()
	dim v as int
	v=1
	dim g as int
	println(int2str(g))
	println(int2str(v))
end

function add[T,base as int](v1 as T, v2 as T)
	return v1+v2+base
end

{@parse_template(get_func("add"))@}