package system.specific.unistd

import functional.option:*
import concurrent.syncdef:*
import unsafe:ptr_cast
import system.specific.unistd.file:_errno
import tuple:*
import typedptr:*
import hash:*
import vector:*

declare function pthread_create(ptr_thread_id as pointer, attr as pointer, routine as pointer, arg as pointer) as int
declare function pthread_exit(p as pointer)
declare function sleep (seconds as int)
declare function pthread_cond_init(cv as pointer,cattr as pointer) as int
declare function pthread_cond_wait(cv as pointer,mutex as pointer) as int
declare function pthread_cond_timedwait(cv as pointer,mutex as pointer, times as pointer) as int
declare function pthread_cond_signal(cv as pointer) as int
declare function pthread_cond_broadcast(cv as pointer) as int
declare function pthread_cond_destroy(cv as pointer) as int
declare function pthread_mutex_destroy(mutex as pointer) as int
declare function pthread_mutex_init(mutex as pointer,attr as pointer) as int
declare function pthread_mutex_lock(mutex as pointer) as int
declare function pthread_mutex_trylock(mutex as pointer) as int
declare function pthread_mutex_unlock(mutex as pointer) as int
declare function pthread_join(thread as pointer, retval as pointer) as int
{@
assert(get_os_name()=='linux' and get_target_bits()==64)
@}

@init_script
{@
from bdconst import *
define("POLLIN",		0x0001)
define("POLLPRI",		0x0002)
define("POLLOUT",		0x0004)
define("POLLERR",		0x0008)
define("POLLHUP",		0x0010)
define("POLLNVAL",	0x0020)
define("ETIMEDOUT",	110)
@}

struct timespec
	public tv_sec as ulong
	public tv_nsec as long
	public func from_milli(ms as ulong)
		tv_sec = ms / 1000
		tv_nsec = (ms % 1000) * 1000000
	end
end

struct mutex_t
	private v1 as pointer
	private v2 as pointer
	private v3 as pointer
	private v4 as pointer
	private v5 as pointer

	public function init()
		pthread_mutex_init(addressof(this), pointerof(null))
	end

	public function enter()
		pthread_mutex_lock(addressof(this))
	end

	public function leave()
		pthread_mutex_unlock(addressof(this))
	end

	public function del()
		pthread_mutex_destroy(addressof(this))
	end
end


struct cond_t
	private v1 as pointer
	private v2 as pointer
	private v3 as pointer
	private v4 as pointer
	private v5 as pointer
	private v6 as pointer
	public func init() => pthread_cond_init(addressof(this), pointerof(null))
	public func await(pMut as pointer, milli as int) as boolean
		dim ret as int
		if milli < 0 then
			ret = pthread_cond_wait(addressof(this), pMut)
		else
			dim t as timespec
			t.from_milli(milli)
			ret = pthread_cond_timedwait(addressof(this), pMut, addressof(t))
		end
		if ret == 0 then
			return true
		else
			if ret != {@ETIMEDOUT()@} then
				throw new wait_exception(ret)
			end
			return false
		end
	end
	public function notify_all() => pthread_cond_broadcast(addressof(this))
	public function notify() => pthread_cond_signal(addressof(this))
	public function del() => pthread_cond_destroy(addressof(this))
end

struct _event
	private mutex as mutex_t
	private cond as cond_t
	private is_triggered as boolean

	public function init()
		mutex.init()
		cond.init()
		is_triggered = false
	end

	public function set()
		mutex.enter()
		is_triggered = true
		cond.notify()
		mutex.leave()
	end

	public function await()
		mutex.enter()
		while !is_triggered
			cond.await(addressof(mutex), -1)
		end
		mutex.leave()
	end

	public function del()
		mutex.del()
		cond.del()
	end
end

class future_impl[T] : concurrent.syncdef.future[T]
	private data as T
	private is_success as boolean
	private event as _event
	private is_event_destroyed as boolean

	public function __init__()
		is_success = false
		event.init()
		is_event_destroyed = false
	end

	public function preset(data as T)
		this.data = data
		is_success = true
	end

	public function success(data as T)
		is_success = true
		this.data = data
		event.set()
	end

	public function fail()
		is_success = false
		event.set()
	end

	public function get_native_handle() as pointer => ptr_cast[pointer](null)

	public function do_then() => __del__()
	public function get_result() as option[T]
		if is_success then
			return some(data)
		else
			return none[T]()
		end
	end

	public function close() => __del__()

	public function do_await() => event.await()
	public function __del__()
		if !is_event_destroyed then
			event.del()
			is_event_destroyed = true
		end
	end
end


struct pollfd 
    public fd as int         # /* file descriptor */
    public events as short    # /* requested events */
    public revents as short   # /* returned events */
end

declare function poll(fds as pointer ##pollfd##, nfds as uint, timeout as int) as int

class poll_exception:wait_exception
	public func __init__(msg as string) => this.msg = msg
	public func get_message() as string => "Poll error: " + msg
end

class future_fd : concurrent.syncdef.future[int]
	private handle as awaitable_handle
	public function __init__(_native as int, _in_event as int)
		handle.fd = _native
		handle.events = _in_event
	end

	public function preset(data as int)
	end

	public function success(data as int)
		throw new runtime_exception("Not implemented")
	end

	public function fail()
		throw new runtime_exception("Not implemented")
	end

	public function get_native_handle() as pointer => addressof(handle)
	public function do_then()
	
	end
	public function get_result() as option[int] => some(handle.revents)

	public function do_await()
		dim pfd as pollfd
		pfd.events = handle.events
		pfd.fd = handle.fd
		if poll(addressof(pfd),1,0-1)<=0 then
			throw new wait_exception(_errno())
		end
		if (pfd.revents & {@POLLERR()@})!=0 then
			throw new poll_exception("POLLERR")
		end
		if (pfd.revents & {@POLLNVAL()@})!=0 then
			throw new poll_exception("POLLNVAL")
		end
		handle.revents = pfd.revents
	end

	public function close() => __del__()
	public function __del__()

	end
end


class _poller
	private fut_set as hash_set[awaitable_wrapper]
	private futures as vector[awaitable]
	private handles as vector[pollfd]

	public function __init__()
		fut_set = new hash_set[awaitable_wrapper]
		futures = new vector[awaitable](0)
		handles = new vector[pollfd](0)
	end

	public function add(ev as awaitable) as awaitable_wrapper
		dim ret = new awaitable_wrapper(ev)
		fut_set.insert(ret)
		return ret
	end

	public function replace(itr as awaitable_wrapper, newev as awaitable)
		itr.fut = newev
	end

	public function remove(itr as awaitable_wrapper)
		fut_set.remove(itr)
	end

	private function get_from_cache() as tuple[awaitable,int]
		if futures.size() > 0 then
			dim idx = handles.size()-1
			dim revents as int= handles[idx].revents
			while revents == 0
				futures.pop_back()
				handles.pop_back()
				if idx ==0 then
					return mktuple(ptr_cast[awaitable](null), 0)
				end
				idx = idx - 1
				revents = handles[idx].revents
			end
			dim ret = futures[idx]
			handles.buffer()[idx].revents = 0
			futures.pop_back()
			handles.pop_back()
			return mktuple(ret,revents)
		else
			return mktuple(ptr_cast[awaitable](null), 0)
		end
	end

	private function set_event(fut as awaitable, revents as int)
		dim phandle = mkref[awaitable_handle](fut.get_native_handle())
		phandle.fptr["revents"]().set(revents)
		fut.do_then()
	end

	public function await(timeout as int) as awaitable
		dim cached = get_from_cache()
		if cached.v0 !== null then
			dim f = cached.v0
			set_event(f, cached.v1)
			return f
		end
		dim itr = fut_set.front()
		while itr!=fut_set.ends()
			dim fut = itr.getk().fut
			futures.push_back(fut)
			dim pfd as pollfd
			dim phandle = mkref[awaitable_handle](fut.get_native_handle())
			dim fd = phandle.f["fd"]()
			if fd == 0-1 then
				throw new runtime_exception("Require the awaitable having native fd")
			end
			pfd.fd = fd
			pfd.events = phandle.f["events"]()
			pfd.revents = 0
			handles.push_back(pfd)
			itr.forward()
		end
		dim pollret = poll(addressof(handles.buffer()[0]),handles.size(),timeout)
		if pollret==0 then
			return null
		else if pollret<0 then
			throw new wait_exception(_errno())
		end
		dim ret_tuple = get_from_cache()
		dim ret = ret_tuple.v0
		if ret === null then
			throw new runtime_exception("POLL returns without event set")
		end
		dim revents = ret_tuple.v1
		if (revents & {@POLLERR()@})!=0 then
			throw new poll_exception("POLLERR")
		end
		if (revents & {@POLLNVAL()@})!=0 then
			throw new poll_exception("POLLNVAL")
		end
		set_event(ret, revents)
		return ret
	end
end

function do_create_thread(routine as pointer, arg as pointer) as pointer
	dim ret as pointer
	pthread_create(addressof(ret),pointerof(null),routine,arg)
	return ret
end

function do_exit_thread()
	pthread_exit(pointerof(null))
end

function _sleep(ms as int)
	sleep(ms/1000)
end

function _join_thread(handle as pointer)
	pthread_join(handle, pointerof(null))
end

function _close_thread(handle as pointer)
	#nothing
end

function _await_multiple_awaitables(aw as awaitable[], offset as uint, len as uint,timeout as int) as awaitable
	throw new runtime_exception("Not implemented")
end
