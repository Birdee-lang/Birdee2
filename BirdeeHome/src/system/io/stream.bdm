package system.io

import vector:vector
import extensions.string:*
import memory

class abstract_input_stream
	private buffer as byte[]
	private pos as uint
	private buf_size as uint
	private read_size as uint
	private strbuf as vector[byte]
	public function __init__(_buf_size as uint)
		buf_size = _buf_size
		buffer = new byte * buf_size
		pos = 0
		read_size = 0
		strbuf = new vector[byte](0)
	end

	public abstract function read_to_buffer(buf as byte[], buf_size as uint) as uint

	private function read()
		read_size = read_to_buffer(buffer, buf_size)#file.read(buffer, 0, buf_size)
		pos = 0
	end

	public function get_char() as byte
		if pos >= read_size then
			read()
			if read_size == 0 then 
				return -1
			end
		end
		dim ret = buffer[pos]
		pos = pos + 1
		return ret
	end

	public function peek() as byte
		if pos >= read_size then
			read()
			if read_size == 0 then 
				return -1
			end
		end
		return buffer[pos]
	end

	private function get_str() as string
		dim ret = new string:copy_bytes(strbuf.buffer(),0,strbuf.size())
		strbuf.clear()
		return ret
	end

	public function get_until(delimiter as byte) as string
		dim cur = get_char()
		while cur!= -1
			strbuf.push_back(cur)
			if cur==delimiter then
				break
			end
			cur = get_char()
		end
		return get_str()
	end

	public func next_token(delimiter as string) as string
		dim c = get_char()
		while c != -1
			if delimiter.find_char(c,0) >= 0 then
					while delimiter.find_char(peek(), 0) >=0
						get_char()
					end
					break
			end
			strbuf.push_back(c)
			c = get_char()
		end
		return get_str()
	end

	public function get_line() as string => get_until({@
from bdutils import *
set_char('\n')
@})

end

class input_stream[T]: abstract_input_stream
	private file as T
	public function __init__(f as T)
		super.__init__(1024)
		file = f
	end

	public function read_to_buffer(buf as byte[], buf_size as uint) as uint
		return file.read(buf, 0, buf_size)
	end
end


class byte_input_stream: abstract_input_stream
	private bytes as byte[]
	private pos as uint

	public function __init__(f as byte[])
		super.__init__(1024)
		bytes = f
		pos = 0
	end

	public function from_string(f as string)
		__init__(f.get_bytes())
	end

	public function read_to_buffer(buf as byte[], buf_size as uint) as uint
		dim to_copy as uint
		if buf_size + pos > bytes.length() then
			to_copy=bytes.length()-pos
		else
			to_copy=buf_size
		end
		memory.copy_array(buf, 0, bytes, pos, to_copy)
		pos=pos+to_copy
		return to_copy
	end
end

class output_stream[T]
	private file as T
	private buffer as byte[]
	private pos as uint
	private buf_size as uint

	public function __del__()
		flush()
	end

	public function flush()
		if pos != 0 then
			file.write(buffer, 0, pos)
			pos=0
		end
	end

	public function close()
		flush()
		file.close()
	end

	public function write_char(v as byte)
		if pos < buf_size then
			buffer[pos] = v
			pos = pos + 1
		else
			file.write(buffer, 0, pos)
			buffer[0] = v
			pos = 0
		end
	end

	public function write(v as string)
		dim buf_cap = buf_size - pos
		dim remaining = v.length()
		dim copied = 0
		while remaining > buf_cap
			memory.copy_array(buffer, pos, v.get_bytes(), copied, buf_cap)
			file.write(buffer, 0, buf_size)
			pos = 0
			copied = copied + buf_cap
			remaining = remaining - buf_cap
			buf_cap = buf_size
		end
		
		if remaining > 0 then
			memory.copy_array(buffer, pos, v.get_bytes(), copied, remaining)
			pos = pos + remaining
		end
	end

	public function __init__(f as T)
		buf_size = 2048
		buffer = new byte * buf_size
		pos = 0
		file = f
	end
	

end