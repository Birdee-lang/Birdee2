package system.io

import {@"system.specific.win32.file" if get_os_name()=="windows" else "system.specific.unistd.file"@}:*

import system.io.filedef:file_open_exception
import system.io.stream:*

{@
from system_0io_0filedef import *
from bdutils import *
@}

@private
class _file
	private handle as pointer
	public function close()
		if handle != pointerof(null) then
			_fclose(handle)
		end
		handle = pointerof(null)
	end

	public func get_native() as pointer => handle
	public func set_native(h as pointer) => handle = h

	public function __del__() => close()

	public function read(buf as byte[], start as uint, len as uint) as uint
		return _fread(handle, addressof(buf[start]), len)
	end

	public function write(buf as byte[], start as uint, len as uint) as uint
		return _fwrite(handle, addressof(buf[start]), len)
	end

	public function writestr(buf as string) as uint
		return write(buf.get_bytes(), 0, buf.length())
	end

	public function seek(offset as long, from as uint) as long
		return _fseek(handle, offset, from)
	end

	public function __init__() 
		throw new file_open_exception("",0)
	end

end

class input_file : _file
	public func __del__() => super.__del__()
	private function write(buf as byte[], start as uint, len as uint) as uint => 0
	private function writestr(buf as string) as uint =>  0
	public function __init__(path as string) 
		set_native(_fopen(path, {@ACCESS_READ()@}, {@CREATE_OPEN_ONLY()@}))
	end
end

class output_file : _file
	public func __del__() => super.__del__()
	private function read(buf as byte[], start as uint, len as uint) as uint => 0
	public function __init__(path as string, open_action as int) 
		set_native(_fopen(path, {@ACCESS_WRITE()@}, open_action))
	end
end

class file : _file
	public func __del__() => super.__del__()
	public function __init__(path as string, open_action as int) 
		set_native(_fopen(path, {@ACCESS_READ()@} | {@ACCESS_WRITE()@}, open_action))
	end
end

class file_input_stream: input_stream[input_file]

end

class file_output_stream: output_stream[output_file]

end