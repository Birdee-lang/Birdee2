package system.io

import system.specific.win32.file:*

import system.io.filedef:file_open_exception
import vector:vector

{@
from system_0io_0filedef import *
from bdutils import *
@}

@private
class _file
	private handle as pointer
	public function close()
		if handle != pointerof(null) then
			_fclose(handle)
		end
		handle = pointerof(null)
	end

	public func get_native() as pointer => handle
	public func set_native(h as pointer) => handle = h

	public function __del__() => close()

	public function read(buf as byte[], start as uint, len as uint) as uint
		return _fread(handle, addressof(buf[start]), len)
	end

	public function write(buf as byte[], start as uint, len as uint) as uint
		return _fwrite(handle, addressof(buf[start]), len)
	end

	public function seek(offset as long, from as uint) as long
		return _fseek(handle, offset, from)
	end

	public function __init__() 
		throw new file_open_exception("",0)
	end

end

class input_file : _file
	public func __del__() => super.__del__()
	private function write(buf as byte[], start as uint, len as uint) as uint => 0
	public function __init__(path as string) 
		set_native(_fopen(path, {@ACCESS_READ()@}, {@CREATE_OPEN_ONLY()@}))
	end
end

class output_file : _file
	public func __del__() => super.__del__()
	private function read(buf as byte[], start as uint, len as uint) as uint => 0
	public function __init__(path as string, open_action as int) 
		set_native(_fopen(path, {@ACCESS_READ()@}, open_action))
	end
end

class file : _file
	public func __del__() => super.__del__()
	public function __init__(path as string, open_action as int) 
		set_native(_fopen(path, {@ACCESS_READ()@}, open_action))
	end
end

class string_scanner
	private file as input_file
	private buffer as byte[]
	private pos as uint
	private buf_size as uint
	private read_size as uint
	private strbuf as vector[byte]
	public function __init__(f as input_file)
		file = f
		buf_size = 1024
		buffer = new byte * buf_size
		pos = 0
		read_size = 0
		strbuf = new vector[byte](0)
	end

	private function read()
		read_size = file.read(buffer, 0, buf_size)
		pos = 0
	end

	public function get_char() as byte
		if pos >= read_size then
			read()
			if read_size == 0 then 
				return 0-1
			end
		end
		dim ret = buffer[pos]
		pos = pos + 1
		return ret
	end

	public function get_until(delimiter as byte) as string
		dim cur = get_char()
		while cur!= 0-1
			strbuf.push_back(cur)
			if cur==delimiter then
				break
			end
			cur = get_char()
		end
		dim ret = new string:copy_bytes(strbuf.buffer(),0,strbuf.size())
		strbuf.clear()
		return ret
	end

	public function get_line() as string => get_until({@
from bdutils import *
set_char('\n')
@})

end